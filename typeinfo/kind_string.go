// Code generated by "stringer -type=Kind"; DO NOT EDIT.

package typeinfo

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Invalid-0]
	_ = x[Bool-1]
	_ = x[Int-2]
	_ = x[Int8-3]
	_ = x[Int16-4]
	_ = x[Int32-5]
	_ = x[Int64-6]
	_ = x[Uint-7]
	_ = x[Uint8-8]
	_ = x[Uint16-9]
	_ = x[Uint32-10]
	_ = x[Uint64-11]
	_ = x[Uintptr-12]
	_ = x[Float32-13]
	_ = x[Float64-14]
	_ = x[Complex64-15]
	_ = x[Complex128-16]
	_ = x[String-17]
	_ = x[UnsafePointer-18]
	_ = x[Struct-19]
	_ = x[Pointer-20]
	_ = x[Slice-21]
	_ = x[Array-22]
	_ = x[Map-23]
	_ = x[Custom-24]
}

const _Kind_name = "InvalidBoolIntInt8Int16Int32Int64UintUint8Uint16Uint32Uint64UintptrFloat32Float64Complex64Complex128StringUnsafePointerStructPointerSliceArrayMapCustom"

var _Kind_index = [...]uint8{0, 7, 11, 14, 18, 23, 28, 33, 37, 42, 48, 54, 60, 67, 74, 81, 90, 100, 106, 119, 125, 132, 137, 142, 145, 151}

func (i Kind) String() string {
	if i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
